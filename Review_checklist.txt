1) Are all pre-conditions for a code review fulfilled?
As pre-condition, all input documents must be available, read and understood by the reviewers: SRS, SAS, SDS, SPS
All code artefacts required for the change (CR or defect) should be reviewed: c-files, h-files, configuration files, Makefiles
Further, QAC reports shall be generated by the developer in advance and referenced in the list of artefacts to be reviewed.

2) Does the code exactly implement the design and the requirements?
All design items implemented and nothing more, all requirements covered.

3) Has code duplication been avoided?
No copy-paste programming, no same code in different branches, no two functions with similar code, functions and macros from Central Definitions used where possible.

4) Do the names of functions, variables, parameters, definitions and types match with the actual implementation and is the meaning clear?
5) Is the code readable and are the comments correct and sufficient?
Is the code structured for better readability, is the maximum line length of 160 characters maintained?
Brief but enough to understand the code, comments must match the code, no commented out code.

6) Is the control of loops correct?
No endless loops possible, loops not executed once too often or one time too few (off-by-one).

7) Are functions called as per API description?
Parameters in range, correct scheduling and period. For third-party functions: check the expected scheduling level (BG, ISR, RT).

8) Are static variables initialized?
Non 0 values only.

9) Are local variables initialized before usage ?
Local variables must not be used in operations, before a value has been loaded (within the current scope).

10) Are the calculations correct?
No over/under-flows, values in defined ranges, no division by zeros, used type-casts really needed and no information-loss, signedness correctly handled.

11) Is the endianess of integer data correctly handled?
Renesas Controllers uses little endian, sensors, external devices etc might send big endian.

12) Have constants and masks been defined and used?
Meaningful names (e.g. no RB_XY_One), same definitions shared by all _related_ code parts, same constant/mask not misused for _unrelated_ purposes.

13) Is the code free of race conditions?
No access conflicts for shared variables, all shared variables defined/declared as volatile.
See also: https://inside-docupedia.bosch.com/confluence/display/aeos/Protecting+against+Race+Conditions

14) Are all code-relevant S-SWIT Findings caused by this component fixed or rated?
Code-relevant means that findings with the violation target "Non-Interface Part of (...)" can be ignored.

15) APIs and local functions : Rule (Required)
<short name>
The short name for APIs and local functions consists of the short name of the module the APIs or local functions belong to.

<long name>
For APIs and local functions in the customer library add Cust before the <long name>. For APIs in the project specific part add Prj before the <long name>.
The long name is extended by the allowed calling context. The definition of the calling context is the same as for AB10 with one slight difference (FIQ extension is replaced by RT).

Example:
rb_bsdc_ProgramRegister    // only allowed to be called from BG
rb_wdm_ServiceWd2RT        // only allowed to be called from RT
rb_cdh_RxRcvIndicationIRQ  // only allowed to be called from IRQ
rb_spcr_CalcCrcALL         // can be called from anywhere

16)  Compiler switches : Rule (Required)
Compiler switches are used to define optional usage of code. 
Note: Macros have one exception to the global naming convention rule from above: the “rb_” part is replaced by the upper case equivalent “RB_”.
Example:
/* compiler switch */
#define RB_aidn_Interface_cs
/* include guard */
#define RB_BSWM_BASICSWMGTCFG_H

17)Macro value definitions : Rule (Required)
Macro value definitions are used to have a name for a constant value which is used at several places. They are helpful if the same value shall be used consistent in one module at several places or for parameters in the configuration file. Value definitions are also used inside of multi value compiler switches.

Note: Macros have one exception to the global naming convention rule from above: the “rb_” part is replaced by the upper case equivalent “RB_”.
Example:
#define RB_psem_ManchesterErrorMask_cu8 ((uint8) 0x01u)
#define RB_alg_AlgoMain_mi ((uint16) 1000u)